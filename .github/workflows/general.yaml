name: Hypertube

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  FRONTEND_URL: ${{ secrets.FRONTEND_URL }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Linting
        run: cargo clippy -- -D warnings

  # coverage:
  #   name: Code coverage
  #   runs-on: ubuntu-latest
  #   container:
  #     image: xd009642/tarpaulin
  #     options: --security-opt seccomp=unconfined
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Generate code coverage
  #       run: cargo tarpaulin --verbose --workspace

  # security_audit:
  #   name: Security audit
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: taiki-e/install-action@cargo-deny
  #     - name: Scan for vulnerabilities
  #       run: cargo deny check advisories

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test, fmt, clippy] # , coverage, security_audit 
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
  
      - name: Set up SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /root/hypertube_backend
            git pull origin main
            cargo build --release
            cp /root/hypertube_backend/configuration.json /root/hypertube_backend/target/release/configuration.json
            systemctl restart hypertube_backend.service